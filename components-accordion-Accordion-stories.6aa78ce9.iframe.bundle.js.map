{"version":3,"file":"components-accordion-Accordion-stories.6aa78ce9.iframe.bundle.js","mappings":";;;;AA+GA;AACA;;;;AAIA;AACA;;;AAIA;;;;ACSA;;AAYA;;AAIA;AACA;AAGA;AAWA;;;AAGA;AACA;;;AAGA;AACA;AACA;;AAEA;;;;;AAKA;;;AAGA;;;;;AAKA;;AAEA;;;;;;;AAQA;;ACpKA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;AAWA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;AAcA;;;;;;;;;;;AAcA","sources":["webpack://@kyndryl-design-system/shidoka-foundation/./src/components/accordion/accordion.ts","webpack://@kyndryl-design-system/shidoka-foundation/./src/components/accordion/accordionItem.ts","webpack://@kyndryl-design-system/shidoka-foundation/"],"sourcesContent":["/**\r\n * Copyright Kyndryl, Inc. 2023\r\n */\r\n\r\nimport { html, LitElement } from 'lit';\r\nimport {\r\n  property,\r\n  state,\r\n  customElement,\r\n  queryAssignedElements,\r\n} from 'lit/decorators.js';\r\nimport stylesheet from './accordion.scss';\r\n\r\n/**\r\n * Accordion component.\r\n *\r\n * @slot unnamed - Holds Accordion Items (kd-accordion-item) that make up the accordion\r\n *\r\n */\r\n@customElement('kd-accordion')\r\nexport class Accordion extends LitElement {\r\n  static override styles = [stylesheet];\r\n\r\n  /** Specifies whether to show numbers on the list items. */\r\n  @property({ type: Boolean })\r\n  showNumbers = false;\r\n\r\n  /** Specifies the number to start at if the list has numbers. */\r\n  @property({ type: Number })\r\n  startNumber = 1;\r\n\r\n  /** Specifies whether to show the accordion items with filled headers. */\r\n  @property({ type: Boolean })\r\n  filledHeaders = false;\r\n\r\n  /** Display the accordion as compact or the default large size. */\r\n  @property({ type: Boolean })\r\n  compact = false;\r\n\r\n  /** The string that displays on the toggle to expand all the accordion items. */\r\n  @property({ type: String })\r\n  expandLabel = 'Expand all items';\r\n\r\n  /** The string that displays on the toggle to collapse all the accordion items. */\r\n  @property({ type: String })\r\n  collapseLabel = 'Collapse all items';\r\n\r\n  /**\r\n   * The state of the toggle controlling the \"expand all\" functionality\r\n   * @ignore\r\n   */\r\n  @state() private _allOpenState = false;\r\n\r\n  /** Slotted children kd-accordion-item\r\n   * @internal\r\n   */\r\n  @queryAssignedElements({ selector: 'kd-accordion-item' })\r\n  _accordionItems!: Array<any>;\r\n\r\n  protected _handleSlotChange() {\r\n    this._updateChildren();\r\n  }\r\n\r\n  override willUpdate(changedProps: any) {\r\n    if (\r\n      changedProps.has('filledHeaders') ||\r\n      changedProps.has('compact') ||\r\n      changedProps.has('startNumber') ||\r\n      changedProps.has('showNumbers')\r\n    ) {\r\n      this._updateChildren();\r\n    }\r\n  }\r\n\r\n  protected _updateChildren() {\r\n    this._accordionItems?.forEach((item, index) => {\r\n      item.setFilledHeader(this.filledHeaders);\r\n      item.setCompact(this.compact);\r\n      item.setIndex(this.startNumber + index);\r\n      item.setShowNumbers(this.showNumbers);\r\n    });\r\n  }\r\n\r\n  protected _openAllItems() {\r\n    this._accordionItems?.map((item) => {\r\n      item.open();\r\n    });\r\n  }\r\n\r\n  protected _closeAllItems() {\r\n    this._accordionItems?.map((item) => {\r\n      item.close();\r\n    });\r\n  }\r\n\r\n  private _toggleExpandAll() {\r\n    if (this._allOpenState) {\r\n      this._closeAllItems();\r\n      this._allOpenState = false;\r\n    } else {\r\n      this._openAllItems();\r\n      this._allOpenState = true;\r\n    }\r\n  }\r\n\r\n  override render() {\r\n    let itemContainerClasses = '';\r\n    if (this.filledHeaders) itemContainerClasses += ' filled-headers';\r\n    return html`\r\n      <div class=\"kd-accordion\">\r\n        <div class=\"toggle-container\">\r\n          <a href=\"javascript:void(0)\" @click=\"${this._toggleExpandAll}\">\r\n            ${this._allOpenState ? this.collapseLabel : this.expandLabel}\r\n          </a>\r\n        </div>\r\n\r\n        <div class=\"accordion-item-container${itemContainerClasses}\">\r\n          <slot @slotchange=\"${this._handleSlotChange}\"></slot>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'kd-accordion': Accordion;\r\n  }\r\n}\r\n","/**\r\n * Copyright Kyndryl, Inc. 2022\r\n */\r\n\r\nimport { html, LitElement } from 'lit';\r\nimport { state, property, customElement } from 'lit/decorators.js';\r\nimport { classMap } from 'lit-html/directives/class-map.js';\r\nimport stylesheet from './accordionItem.scss';\r\nimport addIcon from '@carbon/icons/es/add/32';\r\nimport subtractIcon from '@carbon/icons/es/subtract/32';\r\nimport '../icon';\r\n\r\n/**\r\n * AccordionItem component.\r\n *\r\n * @slot icon - Optional leading icon\r\n * @slot body - Body of the accordion item\r\n * @slot title - Title of the accordion item\r\n * @slot subtitle - Optional subtitle of the accordion item\r\n *\r\n */\r\n@customElement('kd-accordion-item')\r\nexport class AccordionItem extends LitElement {\r\n  static override styles = [stylesheet];\r\n\r\n  /** Accordion item opened state. */\r\n  @property({ type: Boolean }) opened = false;\r\n\r\n  /**\r\n   * The index of this item. Passed from the Accordion.\r\n   * @ignore\r\n   */\r\n  @state() private _index = 1;\r\n\r\n  /**\r\n   * Whether the number should be shown. Passed from the Accordion.\r\n   * @ignore\r\n   */\r\n  @state() private _showNumber = false;\r\n\r\n  /**\r\n   * Whether this item displays a filled header. Passed from the Accordion.\r\n   * @ignore\r\n   */\r\n  @state() private _filledHeader = false;\r\n\r\n  /**\r\n   * Whether this item is compact. Passed from the Accordion.\r\n   * @ignore\r\n   */\r\n  @state() private _compact = false;\r\n\r\n  setIndex(index: number) {\r\n    this._index = index;\r\n  }\r\n\r\n  setShowNumbers(value: boolean) {\r\n    this._showNumber = value;\r\n  }\r\n\r\n  setFilledHeader(value: boolean) {\r\n    this._filledHeader = value;\r\n  }\r\n\r\n  setCompact(value: boolean) {\r\n    this._compact = value;\r\n  }\r\n\r\n  open() {\r\n    if (!this.opened) this._toggleOpenState();\r\n  }\r\n\r\n  close() {\r\n    if (this.opened) this._toggleOpenState();\r\n  }\r\n\r\n  private _handleClick(e: Event) {\r\n    e.preventDefault();\r\n    this._toggleOpenState();\r\n  }\r\n\r\n  private _handleKeypress(e: KeyboardEvent) {\r\n    e.preventDefault();\r\n    if (e.key == ' ' || e.key == 'Enter') this._toggleOpenState();\r\n  }\r\n\r\n  private _toggleOpenState() {\r\n    if (this.opened) {\r\n      this.opened = false;\r\n    } else {\r\n      this.opened = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates the number template\r\n   * @ignore\r\n   */\r\n  get numberTemplate() {\r\n    if (this._showNumber) {\r\n      return html`<div class=\"number\">${this._index}</div>`;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates the icon template\r\n   * @ignore\r\n   */\r\n  get iconTemplate() {\r\n    if (this.querySelector('[slot=\"icon\"]')) {\r\n      return html`<div class=\"icon\"><slot name=\"icon\"></slot></div>`;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates the subtitle template\r\n   * @ignore\r\n   */\r\n  get subtitleTemplate() {\r\n    if (this.querySelector('[slot=\"subtitle\"]')) {\r\n      return html`\r\n        <div class=\"kd-accordion-item-subtitle\">\r\n          <slot name=\"subtitle\"></slot>\r\n        </div>\r\n      `;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates the item level expand/collapse template\r\n   * @ignore\r\n   */\r\n  get expandIconTemplate() {\r\n    if (this.opened)\r\n      return html`\r\n        <div class=\"expand-icon\">\r\n          <kd-icon .icon=\"${subtractIcon}\"></kd-icon>\r\n        </div>\r\n      `;\r\n    else {\r\n      return html`\r\n        <div class=\"expand-icon\"><kd-icon .icon=\"${addIcon}\"></kd-icon></div>\r\n      `;\r\n    }\r\n  }\r\n\r\n  override render() {\r\n    const classes: any = classMap({\r\n      'kd-accordion-item': true,\r\n      opened: this.opened,\r\n      'filled-header': this._filledHeader,\r\n      compact: this._compact,\r\n    });\r\n\r\n    return html`\r\n      <div class=\"${classes}\">\r\n        <div\r\n          class=\"kd-accordion-item-title\"\r\n          aria-controls=\"kd-accordion-item-body-${this._index}\"\r\n          aria-expanded=${this.opened}\r\n          tabindex=\"0\"\r\n          role=\"button\"\r\n          @click=\"${(e: Event) => this._handleClick(e)}\"\r\n          @keypress=\"${(e: KeyboardEvent) => this._handleKeypress(e)}\"\r\n          id=\"kd-accordion-item-title-${this._index}\"\r\n        >\r\n          ${this.iconTemplate} ${this.numberTemplate}\r\n\r\n          <div class=\"title\">\r\n            <slot name=\"title\"></slot>\r\n\r\n            ${this.subtitleTemplate}\r\n          </div>\r\n\r\n          ${this.expandIconTemplate}\r\n        </div>\r\n\r\n        <div\r\n          class=\"kd-accordion-item-body\"\r\n          id=\"kd-accordion-item-body-${this._index}\"\r\n          role=\"region\"\r\n          aria-labelledby=\"kd-accordion-item-title-${this._index}\"\r\n        >\r\n          <div class=\"kd-accordion-item-detail\">\r\n            <slot name=\"body\"></slot>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'kd-accordion-item': AccordionItem;\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}