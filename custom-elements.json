{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./common/defs/breakpoints"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./common/helpers/breakpoints"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./common/helpers/events"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./common/helpers/storybook"
          }
        },
        {
          "kind": "js",
          "name": "Button",
          "declaration": {
            "name": "Button",
            "module": "./components/button"
          }
        },
        {
          "kind": "js",
          "name": "Icon",
          "declaration": {
            "name": "Icon",
            "module": "./components/icon"
          }
        },
        {
          "kind": "js",
          "name": "Link",
          "declaration": {
            "name": "Link",
            "module": "./components/link"
          }
        },
        {
          "kind": "js",
          "name": "Accordion",
          "declaration": {
            "name": "Accordion",
            "module": "./components/accordion"
          }
        },
        {
          "kind": "js",
          "name": "AccordionItem",
          "declaration": {
            "name": "AccordionItem",
            "module": "./components/accordion"
          }
        },
        {
          "kind": "js",
          "name": "Card",
          "declaration": {
            "name": "Card",
            "module": "./components/card"
          }
        },
        {
          "kind": "js",
          "name": "SplitButton",
          "declaration": {
            "name": "SplitButton",
            "module": "./components/splitButton"
          }
        },
        {
          "kind": "js",
          "name": "SplitButtonOption",
          "declaration": {
            "name": "SplitButtonOption",
            "module": "./components/splitButton"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/common/defs/breakpoints.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "BREAKPOINTS",
          "type": {
            "text": "object"
          },
          "default": "{\n  SM: 'sm',\n  MD: 'md',\n  LG: 'lg',\n  XL: 'xl',\n  MAX: 'max',\n}",
          "description": "Breakpoint values defined in variable: --kd-current-breakpoint\nUsed for conditional logic and/or rendering in component JS\nby matching the current breakpoint to one of these values."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BREAKPOINTS",
          "declaration": {
            "name": "BREAKPOINTS",
            "module": "src/common/defs/breakpoints.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/common/helpers/breakpoints.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getCurrentBreakpoint",
          "description": "Get the current breakpoint from CSS variable.\nUsed for conditional logic and/or rendering in component JS\nby matching the current breakpoint with values defined in common/defs/breakpoints."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getCurrentBreakpoint",
          "declaration": {
            "name": "getCurrentBreakpoint",
            "module": "src/common/helpers/breakpoints.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/common/helpers/events.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "debounce",
          "parameters": [
            {
              "name": "fn",
              "type": {
                "text": "Function"
              }
            },
            {
              "name": "ms",
              "default": "100"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "debounce",
          "declaration": {
            "name": "debounce",
            "module": "src/common/helpers/events.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/common/helpers/storybook.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "stringToReactHtml",
          "parameters": [
            {
              "name": "string",
              "type": {
                "text": "String"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "createOptionsArray",
          "parameters": [
            {
              "name": "options",
              "default": "{}",
              "type": {
                "text": "*"
              },
              "description": " imported enums object"
            }
          ],
          "description": "Convert an object to an array of only its values.\nUsed when importing enums in component stories for populating argType dropdowns."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "stringToReactHtml",
          "declaration": {
            "name": "stringToReactHtml",
            "module": "src/common/helpers/storybook.ts"
          }
        },
        {
          "kind": "js",
          "name": "createOptionsArray",
          "declaration": {
            "name": "createOptionsArray",
            "module": "src/common/helpers/storybook.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/accordion/accordion.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Accordion component.",
          "name": "Accordion",
          "slots": [
            {
              "description": "Holds Accordion Items (kd-accordion-item) that make up the accordion",
              "name": "unnamed"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "showNumbers",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specifies whether to show numbers on the list items.",
              "attribute": "showNumbers"
            },
            {
              "kind": "field",
              "name": "startNumber",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Specifies the number to start at if the list has numbers.",
              "attribute": "startNumber"
            },
            {
              "kind": "field",
              "name": "filledHeaders",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specifies whether to show the accordion items with filled headers.",
              "attribute": "filledHeaders"
            },
            {
              "kind": "field",
              "name": "compact",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Display the accordion as compact or the default large size.",
              "attribute": "compact"
            },
            {
              "kind": "field",
              "name": "expandLabel",
              "type": {
                "text": "string"
              },
              "default": "'Expand all items'",
              "description": "The string that displays on the toggle to expand all the accordion items.",
              "attribute": "expandLabel"
            },
            {
              "kind": "field",
              "name": "collapseLabel",
              "type": {
                "text": "string"
              },
              "default": "'Collapse all items'",
              "description": "The string that displays on the toggle to collapse all the accordion items.",
              "attribute": "collapseLabel"
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_updateChildren",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_openAllItems",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_closeAllItems",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_toggleExpandAll",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleToggle",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_checkOpenItems",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "showNumbers",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specifies whether to show numbers on the list items.",
              "fieldName": "showNumbers"
            },
            {
              "name": "startNumber",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Specifies the number to start at if the list has numbers.",
              "fieldName": "startNumber"
            },
            {
              "name": "filledHeaders",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specifies whether to show the accordion items with filled headers.",
              "fieldName": "filledHeaders"
            },
            {
              "name": "compact",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Display the accordion as compact or the default large size.",
              "fieldName": "compact"
            },
            {
              "name": "expandLabel",
              "type": {
                "text": "string"
              },
              "default": "'Expand all items'",
              "description": "The string that displays on the toggle to expand all the accordion items.",
              "fieldName": "expandLabel"
            },
            {
              "name": "collapseLabel",
              "type": {
                "text": "string"
              },
              "default": "'Collapse all items'",
              "description": "The string that displays on the toggle to collapse all the accordion items.",
              "fieldName": "collapseLabel"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "kd-accordion",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Accordion",
          "declaration": {
            "name": "Accordion",
            "module": "src/components/accordion/accordion.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "kd-accordion",
          "declaration": {
            "name": "Accordion",
            "module": "src/components/accordion/accordion.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/accordion/accordionItem.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "AccordionItem component. *",
          "name": "AccordionItem",
          "slots": [
            {
              "description": "Optional leading icon",
              "name": "icon"
            },
            {
              "description": "Body of the accordion item",
              "name": "body"
            },
            {
              "description": "Title of the accordion item",
              "name": "title"
            },
            {
              "description": "Optional subtitle of the accordion item",
              "name": "subtitle"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "opened",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Accordion item opened state.",
              "attribute": "opened"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Accordion item disabled state.",
              "attribute": "disabled"
            },
            {
              "kind": "method",
              "name": "setIndex",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setShowNumbers",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setFilledHeader",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setCompact",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "open"
            },
            {
              "kind": "method",
              "name": "close"
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleKeypress",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_toggleOpenState",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_emitToggleEvent",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "Emits the `opened` state when the accordion item opens/closes.",
              "name": "on-toggle"
            }
          ],
          "attributes": [
            {
              "name": "opened",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Accordion item opened state.",
              "fieldName": "opened"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Accordion item disabled state.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "kd-accordion-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AccordionItem",
          "declaration": {
            "name": "AccordionItem",
            "module": "src/components/accordion/accordionItem.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "kd-accordion-item",
          "declaration": {
            "name": "AccordionItem",
            "module": "src/components/accordion/accordionItem.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/accordion/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "Accordion",
          "declaration": {
            "name": "Accordion",
            "module": "./accordion"
          }
        },
        {
          "kind": "js",
          "name": "AccordionItem",
          "declaration": {
            "name": "AccordionItem",
            "module": "./accordionItem"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Button component.",
          "name": "Button",
          "slots": [
            {
              "description": "Slot for button text.",
              "name": "unnamed"
            },
            {
              "description": "Slot for an icon.",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "ARIA label for the button for accessibility.",
              "attribute": "description"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "BUTTON_TYPES"
              },
              "description": "Type for the &lt;button&gt; element.",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "kind",
              "type": {
                "text": "BUTTON_KINDS"
              },
              "description": "Specifies the visual appearance/kind of the button.",
              "attribute": "kind"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Converts the button to an &lt;a&gt; tag if specified.",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "BUTTON_SIZES"
              },
              "description": "Specifies the size of the button.",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "iconPosition",
              "type": {
                "text": "BUTTON_ICON_POSITION"
              },
              "description": "Specifies the position of the icon relative to any button text.",
              "attribute": "iconPosition"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines if the button is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "destructive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines if the button indicates a destructive action.",
              "attribute": "destructive",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Button value.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Button name.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "formmethod",
              "type": {
                "text": "any"
              },
              "description": "Button formmethod.",
              "attribute": "formmethod"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_testIconOnly",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "Emits the original click event.",
              "name": "on-click"
            }
          ],
          "attributes": [
            {
              "name": "description",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "ARIA label for the button for accessibility.",
              "fieldName": "description"
            },
            {
              "name": "type",
              "type": {
                "text": "BUTTON_TYPES"
              },
              "description": "Type for the &lt;button&gt; element.",
              "fieldName": "type"
            },
            {
              "name": "kind",
              "type": {
                "text": "BUTTON_KINDS"
              },
              "description": "Specifies the visual appearance/kind of the button.",
              "fieldName": "kind"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Converts the button to an &lt;a&gt; tag if specified.",
              "fieldName": "href"
            },
            {
              "name": "size",
              "type": {
                "text": "BUTTON_SIZES"
              },
              "description": "Specifies the size of the button.",
              "fieldName": "size"
            },
            {
              "name": "iconPosition",
              "type": {
                "text": "BUTTON_ICON_POSITION"
              },
              "description": "Specifies the position of the icon relative to any button text.",
              "fieldName": "iconPosition"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines if the button is disabled.",
              "fieldName": "disabled"
            },
            {
              "name": "destructive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines if the button indicates a destructive action.",
              "fieldName": "destructive"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Button value.",
              "fieldName": "value"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Button name.",
              "fieldName": "name"
            },
            {
              "name": "formmethod",
              "type": {
                "text": "any"
              },
              "description": "Button formmethod.",
              "fieldName": "formmethod"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "kd-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Button",
          "declaration": {
            "name": "Button",
            "module": "src/components/button/button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "kd-button",
          "declaration": {
            "name": "Button",
            "module": "src/components/button/button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "Button",
          "declaration": {
            "name": "Button",
            "module": "./button"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card.sample.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Sample Lit component to show card pattern.",
          "name": "SampleCardComponent",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "sample-card-component",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SampleCardComponent",
          "declaration": {
            "name": "SampleCardComponent",
            "module": "src/components/card/card.sample.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sample-card-component",
          "declaration": {
            "name": "SampleCardComponent",
            "module": "src/components/card/card.sample.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Card.",
          "name": "Card",
          "slots": [
            {
              "description": "Slot for card contents.",
              "name": "unnamed"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "default": "'normal'",
              "description": "Card Type. `'normal'` & `'clickable'`",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Card link url for clickable cards.",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Use for Card type `'clickable'`. Defines a relationship between a linked resource and the document. An empty string (default) means no particular relationship.",
              "attribute": "rel"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "any"
              },
              "default": "'_self'",
              "description": "Defines a target attribute for where to load the URL in case of clickable card. Possible options include `'_self'` (deafult), `'_blank'`, `'_parent`', `'_top'`",
              "attribute": "target"
            },
            {
              "kind": "field",
              "name": "hideBorder",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide card border. Useful when clickable card use inside `<kyn-notification>` component.",
              "attribute": "hideBorder"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Captures the click event of clickable card and emits the original event details. Use `e.stopPropogation()` / `e.preventDefault()` for any internal clickable elements when card type is `'clickable'` to stop bubbling / prevent event.",
              "name": "on-card-click"
            }
          ],
          "attributes": [
            {
              "name": "type",
              "type": {
                "text": "string"
              },
              "default": "'normal'",
              "description": "Card Type. `'normal'` & `'clickable'`",
              "fieldName": "type"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Card link url for clickable cards.",
              "fieldName": "href"
            },
            {
              "name": "rel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Use for Card type `'clickable'`. Defines a relationship between a linked resource and the document. An empty string (default) means no particular relationship.",
              "fieldName": "rel"
            },
            {
              "name": "target",
              "type": {
                "text": "any"
              },
              "default": "'_self'",
              "description": "Defines a target attribute for where to load the URL in case of clickable card. Possible options include `'_self'` (deafult), `'_blank'`, `'_parent`', `'_top'`",
              "fieldName": "target"
            },
            {
              "name": "hideBorder",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide card border. Useful when clickable card use inside `<kyn-notification>` component.",
              "fieldName": "hideBorder"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "kd-card",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Card",
          "declaration": {
            "name": "Card",
            "module": "src/components/card/card.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "kd-card",
          "declaration": {
            "name": "Card",
            "module": "src/components/card/card.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "Card",
          "declaration": {
            "name": "Card",
            "module": "./card"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Wrapper for vanilla Carbon icons to simplify usage.",
          "name": "Icon",
          "slots": [
            {
              "description": "The default slot for button content.",
              "name": "unnamed"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "any"
              },
              "default": "{}",
              "description": "The imported Carbon icon.",
              "attribute": "icon"
            },
            {
              "kind": "field",
              "name": "fill",
              "type": {
                "text": "string"
              },
              "default": "'currentColor'",
              "description": "Icon fill color.",
              "attribute": "fill"
            },
            {
              "kind": "field",
              "name": "sizeOverride",
              "type": {
                "text": "number"
              },
              "description": "Specify a size in pixels to override the imported Carbon icon's original size.",
              "attribute": "sizeOverride"
            }
          ],
          "attributes": [
            {
              "name": "icon",
              "type": {
                "text": "any"
              },
              "default": "{}",
              "description": "The imported Carbon icon.",
              "fieldName": "icon"
            },
            {
              "name": "fill",
              "type": {
                "text": "string"
              },
              "default": "'currentColor'",
              "description": "Icon fill color.",
              "fieldName": "fill"
            },
            {
              "name": "sizeOverride",
              "type": {
                "text": "number"
              },
              "description": "Specify a size in pixels to override the imported Carbon icon's original size.",
              "fieldName": "sizeOverride"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "kd-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Icon",
          "declaration": {
            "name": "Icon",
            "module": "src/components/icon/icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "kd-icon",
          "declaration": {
            "name": "Icon",
            "module": "src/components/icon/icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "Icon",
          "declaration": {
            "name": "Icon",
            "module": "./icon"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/link/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/link/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "Link",
          "declaration": {
            "name": "Link",
            "module": "./link"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/link/link.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Component for navigation links.",
          "name": "Link",
          "slots": [
            {
              "description": "Slot for link text.",
              "name": "unnamed"
            },
            {
              "description": "Slot for an icon.",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Link url.",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "LINK_TARGETS"
              },
              "description": "Defines a target attribute for where to load the URL. Possible options include \"_self\" (default), \"_blank\", \"_parent\", \"_top\"",
              "attribute": "target"
            },
            {
              "kind": "field",
              "name": "kind",
              "type": {
                "text": "LINK_TYPES"
              },
              "description": "The Link type. Primary(App) or Secondary(Web).",
              "attribute": "kind"
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Defines a relationship between a linked resource and the document. An empty string (default) means no particular relationship",
              "attribute": "rel"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines if the link is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "standalone",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether you want the standalone Link. By default false. Use this prop. (true) with icon with link variant.",
              "attribute": "standalone"
            },
            {
              "kind": "field",
              "name": "iconLeft",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Positions icon on the left.",
              "attribute": "iconLeft"
            },
            {
              "kind": "method",
              "name": "returnClassMap",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Captures the click event and emits the original event details.",
              "name": "on-click"
            }
          ],
          "attributes": [
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Link url.",
              "fieldName": "href"
            },
            {
              "name": "target",
              "type": {
                "text": "LINK_TARGETS"
              },
              "description": "Defines a target attribute for where to load the URL. Possible options include \"_self\" (default), \"_blank\", \"_parent\", \"_top\"",
              "fieldName": "target"
            },
            {
              "name": "kind",
              "type": {
                "text": "LINK_TYPES"
              },
              "description": "The Link type. Primary(App) or Secondary(Web).",
              "fieldName": "kind"
            },
            {
              "name": "rel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Defines a relationship between a linked resource and the document. An empty string (default) means no particular relationship",
              "fieldName": "rel"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines if the link is disabled.",
              "fieldName": "disabled"
            },
            {
              "name": "standalone",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether you want the standalone Link. By default false. Use this prop. (true) with icon with link variant.",
              "fieldName": "standalone"
            },
            {
              "name": "iconLeft",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Positions icon on the left.",
              "fieldName": "iconLeft"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "kd-link",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Link",
          "declaration": {
            "name": "Link",
            "module": "src/components/link/link.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "kd-link",
          "declaration": {
            "name": "Link",
            "module": "src/components/link/link.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/splitButton/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/splitButton/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "SplitButton",
          "declaration": {
            "name": "SplitButton",
            "module": "./splitButton"
          }
        },
        {
          "kind": "js",
          "name": "SplitButtonOption",
          "declaration": {
            "name": "SplitButtonOption",
            "module": "./splitButtonOption"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/splitButton/splitButton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Split Button",
          "name": "SplitButton",
          "slots": [
            {
              "description": "Slot for split button options.",
              "name": "unnamed"
            },
            {
              "description": "Slot for an icon (optional).",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "ARIA label for the buttons for accessibility.",
              "attribute": "description"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Split button name.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "kind",
              "type": {
                "text": "SPLIT_BTN_KINDS"
              },
              "description": "Specifies the visual appearance/kind of the split button.",
              "attribute": "kind"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "SPLIT_BTN_SIZES"
              },
              "description": "Specifies the size of the split button.",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "iconPosition",
              "type": {
                "text": "SPLIIT_BTN_ICON_POSITION"
              },
              "description": "Specifies the position of the icon relative to any split button text. Default `'left'`. This is optional and work with icon slot.",
              "attribute": "iconPosition"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Split button text (required)",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines if the split button is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "destructive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines if the split button indicates a destructive action.",
              "attribute": "destructive",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "menuMinWidth",
              "type": {
                "text": "string"
              },
              "default": "'initial'",
              "description": "Menu CSS min-width value.",
              "attribute": "menuMinWidth"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Listbox/menu open state.",
              "attribute": "open"
            },
            {
              "kind": "method",
              "name": "handleListBlur",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleButtonKeydown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleListKeydown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyboard",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "keyCode",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "target",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "toggleDropdown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleClickOut",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleBlur",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emitValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Captures the event and emits the selected value and original event details.",
              "name": "on-change"
            }
          ],
          "attributes": [
            {
              "name": "description",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "ARIA label for the buttons for accessibility.",
              "fieldName": "description"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Split button name.",
              "fieldName": "name"
            },
            {
              "name": "kind",
              "type": {
                "text": "SPLIT_BTN_KINDS"
              },
              "description": "Specifies the visual appearance/kind of the split button.",
              "fieldName": "kind"
            },
            {
              "name": "size",
              "type": {
                "text": "SPLIT_BTN_SIZES"
              },
              "description": "Specifies the size of the split button.",
              "fieldName": "size"
            },
            {
              "name": "iconPosition",
              "type": {
                "text": "SPLIIT_BTN_ICON_POSITION"
              },
              "description": "Specifies the position of the icon relative to any split button text. Default `'left'`. This is optional and work with icon slot.",
              "fieldName": "iconPosition"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Split button text (required)",
              "fieldName": "label"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines if the split button is disabled.",
              "fieldName": "disabled"
            },
            {
              "name": "destructive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines if the split button indicates a destructive action.",
              "fieldName": "destructive"
            },
            {
              "name": "menuMinWidth",
              "type": {
                "text": "string"
              },
              "default": "'initial'",
              "description": "Menu CSS min-width value.",
              "fieldName": "menuMinWidth"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Listbox/menu open state.",
              "fieldName": "open"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "kd-split-btn",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SplitButton",
          "declaration": {
            "name": "SplitButton",
            "module": "src/components/splitButton/splitButton.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "kd-split-btn",
          "declaration": {
            "name": "SplitButton",
            "module": "src/components/splitButton/splitButton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/splitButton/splitButtonOption.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Split button option.",
          "name": "SplitButtonOption",
          "slots": [
            {
              "description": "Slot for option text.",
              "name": "unnamed"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Split button option value.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Split button option selected state.",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Split button menu option disabled state.",
              "attribute": "disabled"
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emits the option details to the parent split button.",
              "name": "on-click"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Split button option value.",
              "fieldName": "value"
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Split button option selected state.",
              "fieldName": "selected"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Split button menu option disabled state.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "kd-splitbutton-option",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SplitButtonOption",
          "declaration": {
            "name": "SplitButtonOption",
            "module": "src/components/splitButton/splitButtonOption.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "kd-splitbutton-option",
          "declaration": {
            "name": "SplitButtonOption",
            "module": "src/components/splitButton/splitButtonOption.ts"
          }
        }
      ]
    }
  ]
}
