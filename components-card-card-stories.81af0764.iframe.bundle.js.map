{"version":3,"file":"components-card-card-stories.81af0764.iframe.bundle.js","mappings":";;;AA6CA;AACA;AACA;AACA;AACA;;;AAGA;;AAIA;;;;;;;;;;;;;;;;;AC5BA;ACWA;AACA;AACA;AACA;AAIA;;AAWA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAcA;;AAWA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA","sources":["webpack://@kyndryl-design-system/shidoka-foundation/./src/components/card/card.ts","webpack://@kyndryl-design-system/shidoka-foundation/./src/components/card/card.sample.ts","webpack://@kyndryl-design-system/shidoka-foundation/"],"sourcesContent":["import { LitElement, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\n\nimport CardScss from './card.scss';\n\n/**\n * Card.\n * @fires on-card-click - Captures the click event of clickable card and emits the original event details. Use `e.stopPropogation()` / `e.preventDefault()` for any internal clickable elements when card type is `'clickable'` to stop bubbling / prevent event.\n * @slot unnamed - Slot for card contents.\n */\n\n@customElement('kd-card')\nexport class Card extends LitElement {\n  static override styles = CardScss;\n\n  /** Card Type. `'normal'` & `'clickable'` */\n  @property({ type: String })\n  type = 'normal';\n\n  /** Card link url for clickable cards. */\n  @property({ type: String })\n  href = '';\n\n  /** Use for Card type `'clickable'`. Defines a relationship between a linked resource and the document. An empty string (default) means no particular relationship. */\n  @property({ type: String })\n  rel = '';\n\n  /** Defines a target attribute for where to load the URL in case of clickable card. Possible options include `'_self'` (deafult), `'_blank'`, `'_parent`', `'_top'` */\n  @property({ type: String })\n  target: any = '_self';\n\n  /** Hide card border. Useful when clickable card use inside `<kyn-notification>` component. */\n  @property({ type: Boolean })\n  hideBorder = false;\n\n  override render() {\n    const cardWrapperClasses = {\n      'card-wrapper-clickable': true,\n      'card-border': this.hideBorder === false,\n    };\n\n    return html`${this.type === 'clickable'\n      ? html`<a\n          part=\"card-wrapper\"\n          class=\"${classMap(cardWrapperClasses)}\"\n          href=${this.href}\n          target=${this.target}\n          rel=${this.rel}\n          @click=${(e: Event) => this.handleClick(e)}\n        >\n          <slot></slot>\n        </a>`\n      : html`<div part=\"card-wrapper\" class=\"card-wrapper\">\n          <slot></slot>\n        </div>`} `;\n  }\n\n  private handleClick(e: Event) {\n    const event = new CustomEvent('on-card-click', {\n      detail: { origEvent: e },\n    });\n    this.dispatchEvent(event);\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kd-card': Card;\n  }\n}\n","import { html, LitElement } from 'lit';\nimport { customElement } from 'lit/decorators.js';\nimport CardSampleScss from './cardSample.scss';\n\n/**  Sample Lit component to show card pattern. */\n@customElement('sample-card-component')\nexport class SampleCardComponent extends LitElement {\n  static override styles = CardSampleScss;\n\n  override render() {\n    return html`\n      <div class=\"card-logo-container\">\n        <div class=\"card-logo\">\n          <img\n            class=\"card-logo-img\"\n            src=\"https://fastly.picsum.photos/id/163/32/32.jpg?hmac=6Ev67xrdofIgcyzhr8G7E_OCYUUziK4DoqoH3XZ4I08\"\n            alt=\"product logo\"\n          />\n        </div>\n      </div>\n      <h1 class=\"card-title\">\n        <slot name=\"title\"></slot>\n      </h1>\n      <div class=\"card-subtitle\">This is card subtitle</div>\n      <div class=\"card-description\">\n        <slot name=\"description\"></slot>\n      </div>\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sample-card-component': SampleCardComponent;\n  }\n}\n"],"names":[],"sourceRoot":""}