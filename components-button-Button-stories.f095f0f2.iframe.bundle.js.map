{"version":3,"file":"components-button-Button-stories.f095f0f2.iframe.bundle.js","mappings":";;AAqJA;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA;;;;AAIA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA;;;;;AAMA;;AC9FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAKA;;AAQA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAsFA","sources":["webpack://@kyndryl-design-system/shidoka-foundation/./src/components/button/button.ts","webpack://@kyndryl-design-system/shidoka-foundation/"],"sourcesContent":["/**\n * Copyright Kyndryl, Inc. 2023\n */\n\nimport { html, LitElement } from 'lit';\nimport {\n  customElement,\n  property,\n  state,\n  query,\n  queryAssignedNodes,\n  queryAssignedElements,\n} from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { classMap } from 'lit-html/directives/class-map.js';\nimport { debounce } from '../../common/helpers/events';\n\nimport {\n  BUTTON_KINDS,\n  BUTTON_SIZES,\n  BUTTON_TYPES,\n  BUTTON_ICON_POSITION,\n} from './defs';\n\nimport stylesheet from './button.scss';\n\n/**\n * Button component.\n *\n * @slot unnamed - Slot for button text.\n * @slot icon - Slot for an icon.\n * @fires on-click - Emits the original click event.\n */\n@customElement('kd-button')\nexport class Button extends LitElement {\n  static override styles = [stylesheet];\n\n  /** @ignore */\n  static override shadowRootOptions = {\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  /**\n   * Associate the component with forms.\n   * @ignore\n   */\n  static formAssociated = true;\n\n  /**\n   * Attached internals for form association.\n   * @ignore\n   */\n  @state()\n  internals = this.attachInternals();\n\n  /** ARIA label for the button for accessibility. */\n  @property({ type: String })\n  description = '';\n\n  /** Type for the &lt;button&gt; element. */\n  @property({ type: String })\n  type: BUTTON_TYPES = BUTTON_TYPES.BUTTON;\n\n  /** Specifies the visual appearance/kind of the button. */\n  @property({ type: String })\n  kind: BUTTON_KINDS = BUTTON_KINDS.PRIMARY_APP;\n\n  /** Converts the button to an &lt;a&gt; tag if specified. */\n  @property({ type: String })\n  href = '';\n\n  /** Specifies the size of the button. */\n  @property({ type: String })\n  size: BUTTON_SIZES = BUTTON_SIZES.MEDIUM;\n\n  /** Specifies the position of the icon relative to any button text. */\n  @property({ type: String })\n  iconPosition: BUTTON_ICON_POSITION = BUTTON_ICON_POSITION.CENTER;\n\n  /** Determines if the button is disabled.\n   * @internal\n   */\n  @state()\n  iconOnly = false;\n\n  /** Determines if the button is disabled. */\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  /** Determines if the button indicates a destructive action. */\n  @property({ type: Boolean, reflect: true })\n  destructive = false;\n\n  /** Button value.  */\n  @property({ type: String })\n  value = '';\n\n  /** Button name. */\n  @property({ type: String })\n  name = '';\n\n  /** Button formmethod.  */\n  @property({ type: String })\n  formmethod!: any;\n\n  /** Queries default slot nodes.\n   * @internal\n   */\n  @queryAssignedNodes()\n  _slottedEls!: Array<any>;\n\n  /** Queries icon slot nodes.\n   * @internal\n   */\n  @queryAssignedElements({ slot: 'icon' })\n  _iconEls!: Array<any>;\n\n  /** Queries the .button element.\n   * @internal\n   */\n  @query('.button')\n  _btnEl!: any;\n\n  override render() {\n    const typeClassMap = {\n      [BUTTON_KINDS.PRIMARY_APP]: 'primary-app',\n      [BUTTON_KINDS.PRIMARY_WEB]: 'primary-web',\n      [BUTTON_KINDS.SECONDARY]: 'secondary',\n      [BUTTON_KINDS.TERTIARY]: 'tertiary',\n    };\n\n    const baseTypeClass = typeClassMap[this.kind];\n    const destructModifier = this.destructive ? '-destructive' : '';\n\n    const classes = {\n      button: true,\n      [`kd-btn--${baseTypeClass}${destructModifier}`]: true,\n      [`kd-btn--${baseTypeClass}`]: !this.destructive,\n      'kd-btn--large': this.size === BUTTON_SIZES.LARGE,\n      'kd-btn--small': this.size === BUTTON_SIZES.SMALL,\n      'kd-btn--medium': this.size === BUTTON_SIZES.MEDIUM,\n      [`kd-btn--icon-${this.iconPosition}`]:\n        !!this.iconPosition && !this.iconOnly,\n      [`kd-btn--icon-center`]: this._iconEls?.length && this.iconOnly,\n      'icon-only': this._iconEls?.length && this.iconOnly,\n    };\n\n    return html`\n      ${this.href && this.href !== ''\n        ? html`\n            <a\n              class=${classMap(classes)}\n              href=${this.href}\n              ?disabled=${this.disabled}\n              aria-label=${ifDefined(this.description)}\n              title=${ifDefined(this.description)}\n              @click=${(e: Event) => this.handleClick(e)}\n            >\n              <span>\n                <slot @slotchange=${() => this._handleSlotChange()}></slot>\n                <slot\n                  name=\"icon\"\n                  @slotchange=${() => this._handleSlotChange()}\n                ></slot>\n              </span>\n            </a>\n          `\n        : html`\n            <button\n              class=${classMap(classes)}\n              type=${this.type}\n              ?disabled=${this.disabled}\n              aria-label=${ifDefined(this.description)}\n              title=${ifDefined(this.description)}\n              name=${ifDefined(this.name)}\n              value=${ifDefined(this.value)}\n              formmethod=${ifDefined(this.formmethod)}\n              @click=${(e: Event) => this.handleClick(e)}\n            >\n              <span>\n                <slot @slotchange=${() => this._handleSlotChange()}></slot>\n                <slot\n                  name=\"icon\"\n                  @slotchange=${() => this._handleSlotChange()}\n                ></slot>\n              </span>\n            </button>\n          `}\n    `;\n  }\n\n  private handleClick(e: Event) {\n    if (this.internals.form) {\n      if (this.type === 'submit') {\n        this.internals.form.requestSubmit();\n      } else if (this.type === 'reset') {\n        this.internals.form.reset();\n      }\n    }\n\n    const event = new CustomEvent('on-click', {\n      detail: { origEvent: e },\n    });\n    this.dispatchEvent(event);\n  }\n\n  private _testIconOnly() {\n    if (!this._iconEls?.length) {\n      return false;\n    }\n\n    const TextNodes = this._slottedEls?.filter((node: any) => {\n      return node.textContent.trim() !== '';\n    });\n    const VisibleTextNodes = TextNodes.filter((node: any) => {\n      if (node.tagName) {\n        return node.offsetParent;\n      } else {\n        return true;\n      }\n    });\n\n    return !VisibleTextNodes.length;\n  }\n\n  private _handleSlotChange() {\n    this.iconOnly = this._testIconOnly();\n    this.requestUpdate();\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    window.addEventListener(\n      'resize',\n      debounce(() => {\n        this.iconOnly = this._testIconOnly();\n      })\n    );\n  }\n\n  override disconnectedCallback() {\n    window.removeEventListener(\n      'resize',\n      debounce(() => {\n        this.iconOnly = this._testIconOnly();\n      })\n    );\n\n    super.disconnectedCallback();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kd-button': Button;\n  }\n}\n"],"names":[],"sourceRoot":""}