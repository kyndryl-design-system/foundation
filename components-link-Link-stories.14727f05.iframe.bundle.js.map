{"version":3,"file":"components-link-Link-stories.14727f05.iframe.bundle.js","mappings":";;AAiDA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;AAQA;;;ACUA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;;AAiBA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;;;AAKA","sources":["webpack://@kyndryl-design-system/shidoka-foundation/./src/components/link/link.ts","webpack://@kyndryl-design-system/shidoka-foundation/"],"sourcesContent":["import { LitElement, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { classMap } from 'lit-html/directives/class-map.js';\nimport { LINK_TYPES, LINK_TARGETS } from './defs';\n\nimport LinkStyles from './link.scss';\n\n/**\n * Component for navigation links.\n * @fires on-click - Captures the click event and emits the original event details.\n * @slot unnamed - Slot for link text.\n * @slot icon - Slot for an icon.\n */\n\n@customElement('kd-link')\nexport class Link extends LitElement {\n  static override styles = [LinkStyles];\n\n  /** Link url. */\n  @property({ type: String })\n  href = '';\n\n  /** Defines a target attribute for where to load the URL. Possible options include \"_self\" (deafult), \"_blank\", \"_parent\", \"_top\" */\n  @property({ type: String })\n  target: LINK_TARGETS = LINK_TARGETS.SELF;\n\n  /** The Link type. Primary(App) or Secondary(Web).*/\n  @property({ type: String })\n  kind: LINK_TYPES = LINK_TYPES.PRIMARY;\n\n  /** Defines a relationship between a linked resource and the document. An empty string (default) means no particular relationship */\n  @property({ type: String })\n  rel = '';\n\n  /** Determines if the link is disabled.*/\n  // Reference for disabled links:\n  // https://www.scottohara.me/blog/2021/05/28/disabled-links.html\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  /** Whether you want the standalone Link. Bydefault false. Use this prop. (true) with icon with link variant. */\n  @property({ type: Boolean })\n  standalone = false;\n\n  override render() {\n    const classes = this.returnClassMap();\n\n    return html`\n      <a\n        class=\"kd-link-text ${classes}\"\n        target=${this.target}\n        role=\"link\"\n        rel=${this.rel}\n        href=${this.href ? this.href : 'javascript:void(0)'}\n        ?disabled=${this.disabled}\n        @click=${(e: Event) => this.handleClick(e)}\n      >\n        <span class=\"kd-link-text-span-flex\">\n          <slot></slot>\n          <slot name=\"icon\"></slot>\n        </span>\n      </a>\n    `;\n  }\n  // -- Apply classes according to states, kind etc. -- //\n  private returnClassMap() {\n    if (this.disabled) {\n      return classMap({\n        ['kd-link-text-disabled']: this.disabled,\n      });\n    } else {\n      return classMap({\n        ['kd-link-text-primary']:\n          this.kind === LINK_TYPES.PRIMARY || !this.kind,\n        ['kd-link-text-secondary']: this.kind === LINK_TYPES.SECONDARY,\n        ['kd-link-text-inline']: !this.standalone,\n        ['kd-link-text-standalone']: this.standalone,\n      });\n    }\n  }\n\n  private handleClick(e: Event) {\n    if (this.disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    const event = new CustomEvent('on-click', {\n      detail: { href: this.href, origEvent: e },\n    });\n    this.dispatchEvent(event);\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kd-link': Link;\n  }\n}\n"],"names":[],"sourceRoot":""}